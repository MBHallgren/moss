#!/usr/bin/env python3

# Copyright (c) 2019, Malte BjÃ¸rn Hallgren Technical University of Denmark
# All rights reserved.
#

#Import Libraries

import sys
import os
import argparse
import operator
import random
import subprocess
import time
import gc
import numpy as np
import array
from optparse import OptionParser
from operator import itemgetter
import re
import json
import sqlite3
import moss_functions as moss
import json
import datetime
import threading


#Use Argparse to correctly open the inputfiles

# create the parser for the "surveillance" command


parser = argparse.ArgumentParser(description='.')
parser.add_argument('-info', type=int, help='surveillance info')
parser.add_argument('-i_illumina', action="store", type=str, dest='i_illumina', nargs="+", default="", help='The path to the directory containing ONLY the input illumina files. Should be used when analyzing >5 read-files at a time.')
parser.add_argument('-i_nanopore', action="store", type=str, dest='i_nanopore', default="", help='The path to the directory containing ONLY the input nanopore files. Should be used when analyzing >5 read-files at a time.')
parser.add_argument("-configname", action="store", type=str, default = "", dest="configname", help="Comeplete path to the database directory generated by running moss.py. Default name is configname.")
parser.add_argument("-o", action="store", dest="output_name", help="Name that you would like the output directory to be called.")
parser.add_argument('-version', action='version', version='moss 1.0.0', help = "Current version of PathogenRealTimeTyper.")
parser.add_argument("-exepath", action="store", dest="exepath", default = "", help="Complete path to the moss repo that you cloned, in which your kma and ccphylo folder at located.")
args = parser.parse_args()

jobid = random.randint(1,100000000)



if args.configname != "":
    configname = moss.correctPathCheck(args.configname)
else:
    sys.exit("no moss database path was given.")
if args.exepath != "":
    exepath = moss.correctPathCheck(args.exepath)
else:
    sys.exit("No exepath was given.")


def SurveillancePipeline(i_illumina, i_nanopore,
                         configname, output_name, exepath):
    # Check if an assembly is currently running and status on other semaphores
    moss.semaphoreInitCheck()  # Wait here is writing is taking place in reference DB.
    print("semaphore check complete")

    inputType, total_filenames, assemblyType = moss.mossCheckInputFiles(i_illumina, i_nanopore)

    kma_path = exepath + "kma/kma"
    referencedb = configname + "REFDB.ATG"

    if output_name[0] == "/":
        target_dir = configname + "preliminaryEstimations/" + output_name.split("/")[-1] + "/"
    else:
        target_dir = configname + "preliminaryEstimations/" + output_name + "/"
    cmd = "mkdir " + target_dir
    os.system(cmd)
    kma_database_path = referencedb

    logfilename = target_dir + "logfile_" + output_name
    logfile = open(logfilename, 'w')

    # Print messages
    print("# Preliminary estimation of:", file=logfile)
    print("-input: {}".format(total_filenames), file=logfile)

    best_template, best_template_score, template_found, reference_header_text = moss.findTemplateSurveillance(total_filenames, target_dir, kma_database_path,  kma_path)

    print ("Reference identification results:", file = logfile)
    print ("Best Template ID: {}".format(best_template), file = logfile)
    print ("Best Template Score:: {}".format(best_template_score), file = logfile)
    print ("Template Name: {}".format(reference_header_text), file = logfile)



    logfile.close()



def main():
    if len(args.i_illumina) == 2:
        inputCheck = "Succes"
    elif len(args.i_illumina) == 1:
        inputCheck = args.i_illumina[0] + args.i_nanopore
    else:
        inputCheck = args.i_nanopore
    if inputCheck == "":
        sys.exit("No input was given.")
    SurveillancePipeline(args.i_illumina, args.i_nanopore, configname, args.output_name, args.exepath)


if __name__== "__main__":
  main()